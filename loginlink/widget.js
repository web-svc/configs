!function(n){const t={_config:{clientId:null,redirectUri:n.location.origin+"/auth/callback",authEndpoint:"https://loginlink.websvc.in/authorize",responseType:"code",scope:"openid profile email",onLoginStart:null,onLoginError:null},init:function(n){if(!n||!n.clientId)return void console.error("[LoginLink] Missing required clientId in init().");this._config={...this._config,...n}},login:function(){try{if(!this._config.clientId)throw new Error("LoginLink not initialized. Call LoginLink.init first.");const e=this._generateRandomState();localStorage.setItem("loginlink_oauth_state",e);const o=new URLSearchParams({client_id:this._config.clientId,redirect_uri:this._config.redirectUri,response_type:this._config.responseType,scope:this._config.scope,state:e}),r=`${this._config.authEndpoint}?${o.toString()}`;"function"==typeof this._config.onLoginStart&&this._config.onLoginStart(r),n.location.href=r}catch(n){console.error("[LoginLink] Login error:",n),"function"==typeof this._config.onLoginError&&this._config.onLoginError(n)}},verifyState:function(n){return localStorage.getItem("loginlink_oauth_state")===n},_generateRandomState:function(){return crypto.randomUUID?.()||Math.random().toString(36).substr(2,12)}};n.LoginLink=t}(window);
